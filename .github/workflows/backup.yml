name: MongoDB Backup

on:
  schedule:
    - cron: '0 */12 * * *'  # Every 12 hours
  workflow_dispatch:  # Manual trigger

jobs:
  backup:
    runs-on: ubuntu-latest

    steps:
      - name: Generate backup timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT

      - name: Install MongoDB Database Tools
        run: |
          wget https://fastdl.mongodb.org/tools/db/mongodb-database-tools-ubuntu2204-x86_64-100.9.4.deb
          sudo apt install ./mongodb-database-tools-ubuntu2204-x86_64-100.9.4.deb

      - name: Create MongoDB backup
        env:
          MONGODB_URI: mongodb://${{ secrets.MONGODB_USERNAME }}:${{ secrets.MONGODB_PASSWORD }}@${{ secrets.MONGODB_HOST }}:27017/${{ secrets.MONGODB_DATABASE }}
        run: |
          mongodump \
            --uri="${MONGODB_URI}" \
            --archive="backup_${{ steps.timestamp.outputs.timestamp }}.gz" \
            --gzip

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Configure AWS CLI for Cloudflare R2
        run: |
          aws configure set aws_access_key_id ${{ secrets.R2_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.R2_SECRET_ACCESS_KEY }}
          aws configure set region auto

      - name: Upload backup to Cloudflare R2
        run: |
          aws s3 cp \
            backup_${{ steps.timestamp.outputs.timestamp }}.gz \
            s3://${{ secrets.R2_BUCKET_NAME }}/backup_${{ steps.timestamp.outputs.timestamp }}.gz \
            --endpoint-url ${{ secrets.R2_ENDPOINT_URL }}

      - name: Cleanup old backups
        run: |
          BACKUPS=$(aws s3 ls s3://${{ secrets.R2_BUCKET_NAME }}/ \
            --endpoint-url ${{ secrets.R2_ENDPOINT_URL }} \
            | sort -r | awk '{print $4}')
          
          COUNT=0
          echo "$BACKUPS" | while read backup; do
            COUNT=$((COUNT + 1))
            if [ $COUNT -gt 14 ] && [[ $backup == backup_* ]]; then
              aws s3 rm s3://${{ secrets.R2_BUCKET_NAME }}/$backup \
                --endpoint-url ${{ secrets.R2_ENDPOINT_URL }}
              echo "Deleted old backup: $backup"
            fi
          done